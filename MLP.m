function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 15-Jun-2018 01:48:30.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx2 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.00605886802986788;-8330.34891715];
x1_step1.gain = [0.00594983054553932;0.000240085981978801];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.6691985429351827719;-2.3783577825453541266;-3.0110177962157540499;0.037708270063216621504;2.2900647113558796342;0.9687937986551827807;-1.6037252896741895913;-7.0805356385884268278;-1.4391776424812168234;-9.0778033033857585821];
IW1_1 = [6.0523222206302618176 0.27606995676492762648;-1.0575142742432714904 -1.9779847164258277381;-5.2447484138749587146 2.5993368092869935104;-6.9414981046215373794 -2.3109504114696699517;-3.3203912926335990008 -2.4666010723669087312;6.0035552534561738014 3.9856936408176655284;-2.6484896870277969683 -4.754554545750097283;-7.1260802806462582026 0.9669338248984833406;14.490754637423746587 1.8038805900688466011;-6.3318935117615628982 -6.7113189038536846809];

% Layer 2
b2 = -0.87512337340699786203;
LW2_1 = [-0.22082885829351669993 -0.36338988839893693328 -0.012797111939829214355 -1.1049842171985599926 -0.35755121271051620857 -1.108004766204764735 -0.29161296791358048974 -1.0173328392966478617 -0.29770714093825811908 -0.054126394906823194209];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00101684770681708;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
